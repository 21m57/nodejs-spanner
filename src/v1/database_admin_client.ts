// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LROperation,
  PaginationCallback,
  PaginationResponse,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './database_admin_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Cloud Spanner Database Admin API
 *
 *  The Cloud Spanner Database Admin API can be used to create, drop, and
 *  list databases. It also enables updating the schema of pre-existing
 *  databases.
 * @class
 * @memberof v1
 */
export class DatabaseAdminClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  auth: gax.GoogleAuth;
  operationsClient: gax.OperationsClient;
  databaseAdminStub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DatabaseAdminClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof DatabaseAdminClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof DatabaseAdminClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    const protos = gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      databasePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}/databases/{database}'
      ),
      instancePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listDatabases: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'databases'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? gaxModule.protobuf.Root.fromJSON(require('../../protos/protos.json'))
      : gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = gaxModule
      .lro({
        auth: this.auth,
        grpc: 'grpc' in gaxGrpc ? gaxGrpc.grpc : undefined,
      })
      .operationsClient(opts);
    const createDatabaseResponse = protoFilesRoot.lookup(
      '.google.spanner.admin.database.v1.Database'
    ) as gax.protobuf.Type;
    const createDatabaseMetadata = protoFilesRoot.lookup(
      '.google.spanner.admin.database.v1.CreateDatabaseMetadata'
    ) as gax.protobuf.Type;
    const updateDatabaseDdlResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const updateDatabaseDdlMetadata = protoFilesRoot.lookup(
      '.google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata'
    ) as gax.protobuf.Type;

    this._descriptors.longrunning = {
      createDatabase: new gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createDatabaseResponse.decode.bind(createDatabaseResponse),
        createDatabaseMetadata.decode.bind(createDatabaseMetadata)
      ),
      updateDatabaseDdl: new gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateDatabaseDdlResponse.decode.bind(updateDatabaseDdlResponse),
        updateDatabaseDdlMetadata.decode.bind(updateDatabaseDdlMetadata)
      ),
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
      'google.spanner.admin.database.v1.DatabaseAdmin',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.spanner.admin.database.v1.DatabaseAdmin.
    this.databaseAdminStub = gaxGrpc.createStub(
      opts.fallback
        ? (protos as protobuf.Root).lookupService(
            'google.spanner.admin.database.v1.DatabaseAdmin'
          )
        : // tslint:disable-next-line no-any
          (protos as any).google.spanner.admin.database.v1.DatabaseAdmin,
      opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const databaseAdminStubMethods = [
      'listDatabases',
      'createDatabase',
      'getDatabase',
      'updateDatabaseDdl',
      'dropDatabase',
      'getDatabaseDdl',
      'setIamPolicy',
      'getIamPolicy',
      'testIamPermissions',
    ];

    for (const methodName of databaseAdminStubMethods) {
      const innerCallPromise = this.databaseAdminStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'spanner.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'spanner.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/spanner.admin',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getDatabase(
    request: protosTypes.google.spanner.admin.database.v1.IGetDatabaseRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.spanner.admin.database.v1.IDatabase,
      (
        | protosTypes.google.spanner.admin.database.v1.IGetDatabaseRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getDatabase(
    request: protosTypes.google.spanner.admin.database.v1.IGetDatabaseRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.spanner.admin.database.v1.IDatabase,
      | protosTypes.google.spanner.admin.database.v1.IGetDatabaseRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets the state of a Cloud Spanner database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the requested database. Values are of the form
   *   `projects/<project>/instances/<instance>/databases/<database>`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Database]{@link google.spanner.admin.database.v1.Database}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getDatabase(
    request: protosTypes.google.spanner.admin.database.v1.IGetDatabaseRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.spanner.admin.database.v1.IDatabase,
          | protosTypes.google.spanner.admin.database.v1.IGetDatabaseRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.spanner.admin.database.v1.IDatabase,
      | protosTypes.google.spanner.admin.database.v1.IGetDatabaseRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.spanner.admin.database.v1.IDatabase,
      (
        | protosTypes.google.spanner.admin.database.v1.IGetDatabaseRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getDatabase(request, options, callback);
  }
  dropDatabase(
    request: protosTypes.google.spanner.admin.database.v1.IDropDatabaseRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.spanner.admin.database.v1.IDropDatabaseRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  dropDatabase(
    request: protosTypes.google.spanner.admin.database.v1.IDropDatabaseRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.spanner.admin.database.v1.IDropDatabaseRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Drops (aka deletes) a Cloud Spanner database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.database
   *   Required. The database to be dropped.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  dropDatabase(
    request: protosTypes.google.spanner.admin.database.v1.IDropDatabaseRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.spanner.admin.database.v1.IDropDatabaseRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.spanner.admin.database.v1.IDropDatabaseRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.spanner.admin.database.v1.IDropDatabaseRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      database: request.database || '',
    });
    return this._innerApiCalls.dropDatabase(request, options, callback);
  }
  getDatabaseDdl(
    request: protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlResponse,
      (
        | protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getDatabaseDdl(
    request: protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlResponse,
      | protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Returns the schema of a Cloud Spanner database as a list of formatted
   * DDL statements. This method does not show pending schema updates, those may
   * be queried using the [Operations][google.longrunning.Operations] API.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.database
   *   Required. The database whose schema we wish to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GetDatabaseDdlResponse]{@link google.spanner.admin.database.v1.GetDatabaseDdlResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getDatabaseDdl(
    request: protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlResponse,
          | protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlResponse,
      | protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlResponse,
      (
        | protosTypes.google.spanner.admin.database.v1.IGetDatabaseDdlRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      database: request.database || '',
    });
    return this._innerApiCalls.getDatabaseDdl(request, options, callback);
  }
  setIamPolicy(
    request: protosTypes.google.iam.v1.ISetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protosTypes.google.iam.v1.ISetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Sets the access control policy on a database resource.
   * Replaces any existing policy.
   *
   * Authorization requires `spanner.databases.setIamPolicy`
   * permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: protosTypes.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.iam.v1.IPolicy,
          protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    return this._innerApiCalls.setIamPolicy(request, options, callback);
  }
  getIamPolicy(
    request: protosTypes.google.iam.v1.IGetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protosTypes.google.iam.v1.IGetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets the access control policy for a database resource.
   * Returns an empty policy if a database exists but does
   * not have a policy set.
   *
   * Authorization requires `spanner.databases.getIamPolicy` permission on
   * [resource][google.iam.v1.GetIamPolicyRequest.resource].
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: protosTypes.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.iam.v1.IPolicy,
          protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    return this._innerApiCalls.getIamPolicy(request, options, callback);
  }
  testIamPermissions(
    request: protosTypes.google.iam.v1.ITestIamPermissionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.iam.v1.ITestIamPermissionsResponse,
      protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protosTypes.google.iam.v1.ITestIamPermissionsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.iam.v1.ITestIamPermissionsResponse,
      protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Returns permissions that the caller has on the specified database resource.
   *
   * Attempting this RPC on a non-existent Cloud Spanner database will
   * result in a NOT_FOUND error if the user has
   * `spanner.databases.list` permission on the containing Cloud
   * Spanner instance. Otherwise returns an empty set of permissions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  testIamPermissions(
    request: protosTypes.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.iam.v1.ITestIamPermissionsResponse,
          protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.iam.v1.ITestIamPermissionsResponse,
      protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.iam.v1.ITestIamPermissionsResponse,
      protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    return this._innerApiCalls.testIamPermissions(request, options, callback);
  }

  createDatabase(
    request: protosTypes.google.spanner.admin.database.v1.ICreateDatabaseRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protosTypes.google.spanner.admin.database.v1.IDatabase,
        protosTypes.google.spanner.admin.database.v1.ICreateDatabaseMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createDatabase(
    request: protosTypes.google.spanner.admin.database.v1.ICreateDatabaseRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protosTypes.google.spanner.admin.database.v1.IDatabase,
        protosTypes.google.spanner.admin.database.v1.ICreateDatabaseMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a new Cloud Spanner database and starts to prepare it for serving.
   * The returned [long-running operation][google.longrunning.Operation] will
   * have a name of the format `<database_name>/operations/<operation_id>` and
   * can be used to track preparation of the database. The
   * [metadata][google.longrunning.Operation.metadata] field type is
   * [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata].
   * The [response][google.longrunning.Operation.response] field type is
   * [Database][google.spanner.admin.database.v1.Database], if successful.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the instance that will serve the new database.
   *   Values are of the form `projects/<project>/instances/<instance>`.
   * @param {string} request.createStatement
   *   Required. A `CREATE DATABASE` statement, which specifies the ID of the
   *   new database.  The database ID must conform to the regular expression
   *   `[a-z][a-z0-9_\-]*[a-z0-9]` and be between 2 and 30 characters in length.
   *   If the database ID is a reserved word or if it contains a hyphen, the
   *   database ID must be enclosed in backticks (`` ` ``).
   * @param {string[]} request.extraStatements
   *   An optional list of DDL statements to run inside the newly created
   *   database. Statements can create tables, indexes, etc. These
   *   statements execute atomically with the creation of the database:
   *   if there is an error in any statement, the database is not created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createDatabase(
    request: protosTypes.google.spanner.admin.database.v1.ICreateDatabaseRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protosTypes.google.spanner.admin.database.v1.IDatabase,
            protosTypes.google.spanner.admin.database.v1.ICreateDatabaseMetadata
          >,
          protosTypes.google.longrunning.IOperation | undefined,
          {} | undefined
        >,
    callback?: Callback<
      LROperation<
        protosTypes.google.spanner.admin.database.v1.IDatabase,
        protosTypes.google.spanner.admin.database.v1.ICreateDatabaseMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): Promise<
    [
      LROperation<
        protosTypes.google.spanner.admin.database.v1.IDatabase,
        protosTypes.google.spanner.admin.database.v1.ICreateDatabaseMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createDatabase(request, options, callback);
  }
  updateDatabaseDdl(
    request: protosTypes.google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateDatabaseDdl(
    request: protosTypes.google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates the schema of a Cloud Spanner database by
   * creating/altering/dropping tables, columns, indexes, etc. The returned
   * [long-running operation][google.longrunning.Operation] will have a name of
   * the format `<database_name>/operations/<operation_id>` and can be used to
   * track execution of the schema change(s). The
   * [metadata][google.longrunning.Operation.metadata] field type is
   * [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].
   * The operation has no response.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.database
   *   Required. The database to update.
   * @param {string[]} request.statements
   *   Required. DDL statements to be applied to the database.
   * @param {string} request.operationId
   *   If empty, the new update request is assigned an
   *   automatically-generated operation ID. Otherwise, `operation_id`
   *   is used to construct the name of the resulting
   *   [Operation][google.longrunning.Operation].
   *
   *   Specifying an explicit operation ID simplifies determining
   *   whether the statements were executed in the event that the
   *   [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]
   *   call is replayed, or the return value is otherwise lost: the
   *   [database][google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database]
   *   and `operation_id` fields can be combined to form the
   *   [name][google.longrunning.Operation.name] of the resulting
   *   [longrunning.Operation][google.longrunning.Operation]:
   *   `<database>/operations/<operation_id>`.
   *
   *   `operation_id` should be unique within the database, and must be
   *   a valid identifier: `[a-z][a-z0-9_]*`. Note that
   *   automatically-generated operation IDs always begin with an
   *   underscore. If the named operation already exists,
   *   [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]
   *   returns `ALREADY_EXISTS`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateDatabaseDdl(
    request: protosTypes.google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protosTypes.google.protobuf.IEmpty,
            protosTypes.google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata
          >,
          protosTypes.google.longrunning.IOperation | undefined,
          {} | undefined
        >,
    callback?: Callback<
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): Promise<
    [
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      database: request.database || '',
    });
    return this._innerApiCalls.updateDatabaseDdl(request, options, callback);
  }
  listDatabases(
    request: protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.spanner.admin.database.v1.IDatabase[],
      protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest | null,
      protosTypes.google.spanner.admin.database.v1.IListDatabasesResponse
    ]
  >;
  listDatabases(
    request: protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.spanner.admin.database.v1.IDatabase[],
      protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest | null,
      protosTypes.google.spanner.admin.database.v1.IListDatabasesResponse
    >
  ): void;
  /**
   * Lists Cloud Spanner databases.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The instance whose databases should be listed.
   *   Values are of the form `projects/<project>/instances/<instance>`.
   * @param {number} request.pageSize
   *   Number of databases to be returned in the response. If 0 or less,
   *   defaults to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   [next_page_token][google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token]
   *   from a previous
   *   [ListDatabasesResponse][google.spanner.admin.database.v1.ListDatabasesResponse].
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Database]{@link google.spanner.admin.database.v1.Database}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Database]{@link google.spanner.admin.database.v1.Database} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListDatabasesRequest]{@link google.spanner.admin.database.v1.ListDatabasesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListDatabasesResponse]{@link google.spanner.admin.database.v1.ListDatabasesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listDatabases(
    request: protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.spanner.admin.database.v1.IDatabase[],
          protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest | null,
          protosTypes.google.spanner.admin.database.v1.IListDatabasesResponse
        >,
    callback?: Callback<
      protosTypes.google.spanner.admin.database.v1.IDatabase[],
      protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest | null,
      protosTypes.google.spanner.admin.database.v1.IListDatabasesResponse
    >
  ): Promise<
    [
      protosTypes.google.spanner.admin.database.v1.IDatabase[],
      protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest | null,
      protosTypes.google.spanner.admin.database.v1.IListDatabasesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listDatabases(request, options, callback);
  }

  /**
   * Equivalent to {@link listDatabases}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listDatabases} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The instance whose databases should be listed.
   *   Values are of the form `projects/<project>/instances/<instance>`.
   * @param {number} request.pageSize
   *   Number of databases to be returned in the response. If 0 or less,
   *   defaults to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   [next_page_token][google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token]
   *   from a previous
   *   [ListDatabasesResponse][google.spanner.admin.database.v1.ListDatabasesResponse].
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Database]{@link google.spanner.admin.database.v1.Database} on 'data' event.
   */
  listDatabasesStream(
    request?: protosTypes.google.spanner.admin.database.v1.IListDatabasesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listDatabases.createStream(
      this._innerApiCalls.listDatabases as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified database resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @param {string} database
   * @returns {string} Resource name string.
   */
  databasePath(project: string, instance: string, database: string) {
    return this._pathTemplates.databasePathTemplate.render({
      project,
      instance,
      database,
    });
  }

  /**
   * Parse the project from Database resource.
   *
   * @param {string} databaseName
   *   A fully-qualified path representing Database resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatabaseName(databaseName: string) {
    return this._pathTemplates.databasePathTemplate.match(databaseName).project;
  }

  /**
   * Parse the instance from Database resource.
   *
   * @param {string} databaseName
   *   A fully-qualified path representing Database resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromDatabaseName(databaseName: string) {
    return this._pathTemplates.databasePathTemplate.match(databaseName)
      .instance;
  }

  /**
   * Parse the database from Database resource.
   *
   * @param {string} databaseName
   *   A fully-qualified path representing Database resource.
   * @returns {string} A string representing the database.
   */
  matchDatabaseFromDatabaseName(databaseName: string) {
    return this._pathTemplates.databasePathTemplate.match(databaseName)
      .database;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project: string, instance: string) {
    return this._pathTemplates.instancePathTemplate.render({
      project,
      instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this._pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this._pathTemplates.instancePathTemplate.match(instanceName)
      .instance;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.databaseAdminStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
